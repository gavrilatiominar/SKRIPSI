
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Gavrila Sianturi
 */
public class ExtractGUI extends javax.swing.JFrame {

    public String stegoImagePath;

    /**
     * Creates new form ExtractGUI
     */
    public ExtractGUI() {
        initComponents();
        stegoKeyLabel.setVisible(true);
        stegoKeyTextField.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        metodeComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        stegoImageTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        stegoKeyLabel = new javax.swing.JLabel();
        stegoKeyTextField = new javax.swing.JTextField();
        prosesButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        hasilEkstraksiTextField = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ekstraksi Pesan Rahasia");

        jLabel1.setText("Metode Ekstraksi");

        metodeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Least Significant Bit", "Pixel Indicator Technique", "Modified Pixel Indicator Technique" }));
        metodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodeComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Stego Image");

        stegoImageTextField.setEditable(false);

        browseButton.setText("Browse");
        browseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseButtonMouseClicked(evt);
            }
        });
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        stegoKeyLabel.setText("Stego Key");

        stegoKeyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stegoKeyTextFieldActionPerformed(evt);
            }
        });

        prosesButton.setText("Proses");
        prosesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prosesButtonMouseClicked(evt);
            }
        });

        jLabel5.setText("Hasil Ekstraksi");

        hasilEkstraksiTextField.setEditable(false);
        hasilEkstraksiTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasilEkstraksiTextFieldActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resetButtonMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(metodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prosesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetButton))
                            .addComponent(hasilEkstraksiTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(stegoKeyLabel)
                                            .addComponent(stegoKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 158, Short.MAX_VALUE))
                                    .addComponent(stegoImageTextField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton)))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stegoImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addGap(18, 18, 18)
                .addComponent(stegoKeyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stegoKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prosesButton)
                    .addComponent(resetButton))
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hasilEkstraksiTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hasilEkstraksiTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasilEkstraksiTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hasilEkstraksiTextFieldActionPerformed

    private void metodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodeComboBoxActionPerformed
        // TODO add your handling code here:
        if (metodeComboBox.getSelectedIndex() == 1) {
            hasilEkstraksiTextField.setText(null);
            stegoKeyLabel.setVisible(false);
            stegoKeyTextField.setVisible(false);
        } else {
            hasilEkstraksiTextField.setText(null);
            stegoKeyLabel.setVisible(true);
            stegoKeyTextField.setVisible(true);
        }
    }//GEN-LAST:event_metodeComboBoxActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        stegoKeyTextField.setText(null);
        JFileChooser browse = new JFileChooser();
        int returnName = browse.showOpenDialog(null);
        if (returnName == JFileChooser.APPROVE_OPTION) {
            File f = browse.getSelectedFile();
            if (f != null) {
                this.stegoImagePath = f.getAbsolutePath();
                if (this.stegoImagePath.substring(this.stegoImagePath.length() - 4).equals("jpeg") || this.stegoImagePath.substring(this.stegoImagePath.length() - 3).equals("jpg") || this.stegoImagePath.substring(this.stegoImagePath.length() - 3).equals("bmp") || this.stegoImagePath.substring(this.stegoImagePath.length() - 3).equals("png")) {
                    this.stegoImageTextField.setText(stegoImagePath);
                } else {
                    JOptionPane.showMessageDialog(null, "Format file tidak sesuai!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void browseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_browseButtonMouseClicked

    private void prosesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prosesButtonMouseClicked
        // TODO add your handling code here:
        if (metodeComboBox.getSelectedIndex() == 0) {
            if (stegoImageTextField.getText().isEmpty() && stegoKeyTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih stego image dari direktori dan masukkan stego key!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (stegoImageTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih stego image dari direktori!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (stegoKeyTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Masukkan panjang stego key!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    LSBSteganography lsb = new LSBSteganography();
                    ImageProcessor img = new ImageProcessor(stegoImagePath);
                    lsb.setCoverImage(img);
                    String[] stegokey = stegoKeyTextField.getText().split("-");
                    String result = lsb.extractSecretData(img, Integer.parseInt(stegokey[0]));
                    hasilEkstraksiTextField.setText(result);
                } catch (IOException ex) {
                    Logger.getLogger(ExtractGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (metodeComboBox.getSelectedIndex() == 1) {
            if (stegoImageTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih stego image dari direktori!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    PITSteganography pit = new PITSteganography();
                    ImageProcessor img = new ImageProcessor(stegoImagePath);
                    pit.setCoverImage(img);
                    String result = pit.extractSecretData(img);
                    hasilEkstraksiTextField.setText(result);
                } catch (IOException ex) {
                    Logger.getLogger(ExtractGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            if (stegoImageTextField.getText().isEmpty() && stegoKeyTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih stego image dari direktori dan masukkan stego key!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (stegoImageTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih stego image dari direktori!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (stegoKeyTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Masukkan panjang stego key!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    MPITSteganography mpit = new MPITSteganography();
                    ImageProcessor img = new ImageProcessor(stegoImagePath);
                    mpit.setCoverImage(img);
                    String[] stegokey = stegoKeyTextField.getText().split("-");
                    String result = mpit.extractSecretData(img, Integer.parseInt(stegokey[1]), Integer.parseInt(stegokey[0]));
                    hasilEkstraksiTextField.setText(result);
                } catch (IOException ex) {
                    Logger.getLogger(ExtractGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_prosesButtonMouseClicked

    private void stegoKeyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stegoKeyTextFieldActionPerformed
        // TODO add your handling code here:
        hasilEkstraksiTextField.setText(null);
    }//GEN-LAST:event_stegoKeyTextFieldActionPerformed

    private void resetButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_resetButtonMouseEntered

    private void resetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseClicked
        // TODO add your handling code here:
        stegoImageTextField.setText(null);
        stegoKeyTextField.setText(null);
        hasilEkstraksiTextField.setText(null);
    }//GEN-LAST:event_resetButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExtractGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExtractGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExtractGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExtractGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExtractGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField hasilEkstraksiTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox<String> metodeComboBox;
    private javax.swing.JButton prosesButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField stegoImageTextField;
    private javax.swing.JLabel stegoKeyLabel;
    private javax.swing.JTextField stegoKeyTextField;
    // End of variables declaration//GEN-END:variables
}
